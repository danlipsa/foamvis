#include "VectorTensor.frag"
/**
 * @file   VectorDisplay.frag
 * @author Dan R. Lipsa
 *
 * Displays a vector field
 */

float lineWidthPerc = u_lineWidth / u_gridCellLength;


/**
 * @return true if the transform matrix is valid
 */
bool getVector (vec2 texCoordCenter, out vec2 v)
{
    float count = texture2D (u_scalarAverageTexUnit, texCoordCenter).y;
    if (count == 0.0)
	return false;
    v = texture2D (u_tensorAverageTexUnit, texCoordCenter).xy;
    v = v / count;
    return true;
}


void rotateModelView (inout vec2 v)
{
    mat2 r = mat2 (gl_ModelViewMatrix[0].xy, 
		   gl_ModelViewMatrix[1].xy);
    v = r * v;
}

vec2 rotate (vec2 v, float deg)
{
    float rad = radians (deg);
    mat2 r = mat2 (cos (rad), sin (rad), - sin (rad), cos (rad));
    return r * v;
}

// position: pixel postion relative to the center of the line
bool isOnLine (vec2 position, vec2 n, float width, 
	     float lengthLeft, float lengthRight)
{
    width = width / 2;
    return 
	// pixels along the line (perpendicular on n)
	dot (position, vec2 (n[0], n[1])) <= width &&
	dot (position, vec2 (-n[0], -n[1])) <= width &&
	// pixels perpendicular to the line (along n)
	dot (position, vec2 (-n[1], n[0])) <= lengthLeft &&
	dot (position, vec2 (n[1], -n[0])) <= lengthRight;
}

bool isOnLine (vec2 position, vec2 n, float width, float length)
{
    length = length / 2;
    return isOnLine (position, n, width, length, length);
}

bool isHalfSpace (vec2 x, vec2 p1, vec2 p2)
{
    vec2 v = normalize (p2 - p1);
    return dot (x - p1, vec2 (-v[1], v[0])) <= 0;
}

bool isOnTriangle (vec2 x, vec2 p1, vec2 p2, vec2 p3)
{
    return 
	isHalfSpace (x, p1, p2) &&
	isHalfSpace (x, p2, p3) &&
	isHalfSpace (x, p3, p1);
}


float clampVectorLength (float length, float maxLength)
{
    return min (length, 1.0);
}

vec2 clamp (vec2 v, float maxLength, out bool clamped)
{
    float length = length (v);
    if (length > maxLength)
    {
        clamped = true;
        return v * (maxLength / length);
    }
    else
    {
        clamped = false;
        return v;
    }
}

// x is in [0, 1)
bool isOnArrow (vec2 x, vec2 texCoordCenter, out float magnitude)
{
    vec2 v;
    if (getVector (texCoordCenter, v))
    {
        magnitude = length (v);
        const float arrowAngle = 15.0;
        const float arrowLengthInPixels = 10;
        rotateModelView (v);
        bool clamped = false;
	if (u_sameSize)
	    v = normalize (v) * u_gridCellLength;
	else
	    v = clamp (v * u_sizeRatio, u_gridCellLength, clamped);
        float arrowLength = min (
            length (v), arrowLengthInPixels * u_onePixelInObjectSpace) / 
            u_gridCellLength;
        //float arrowLength = length (v) / u_gridCellLength;
        v = v / u_gridCellLength;
        float magnitude = length (v);
        v = normalize (v);
        vec2 n = vec2 (-v[1], v[0]);
        vec2 xToMiddle = x - vec2 (.5, .5);
        vec2 xToTop = xToMiddle - v * (magnitude / 2);
        vec2 p1 = vec2 (.5, .5) + v * (magnitude / 2);
        vec2 p2 = p1 - rotate (v, arrowAngle) * arrowLength;
        vec2 p3 = p1 - rotate (v, -arrowAngle) * arrowLength;
        return 
            isOnLine (xToMiddle , n, lineWidthPerc, magnitude) ||
            isOnTriangle (x, p1, p2, p3) ||
            (u_clampingShown && clamped && 
             isOnLine (xToMiddle, v, lineWidthPerc, arrowLength));
    }
    else
        return false;
}

void main (void)
{
    vec2 gridCoord, texCoordCenter;
    getCoordinates (gridCoord, texCoordCenter);
    vec2 gridCoordFract = fract (gridCoord);
    vec2 gridCoordFloor = floor (gridCoord);
    float velocityMagnitude;
    if (
        (u_glyphShown &&
         isOnArrow (gridCoordFract, texCoordCenter, velocityMagnitude)) || 
	
        (u_gridShown && isOnGrid (gridCoordFract)) ||

	(u_gridCellCenterShown && 
	 isOnGridCellCenter (gridCoordFract, gridCoordFloor)) ||

	isOnGridCenter (gridCoord))
    {
	if (u_colorMapped)
	{
	    float index = (velocityMagnitude - u_minValue) / 
		(u_maxValue - u_minValue);
	    gl_FragColor = texture1D (u_overlayBarTexUnit, index);
	    
	}
	else
	    gl_FragColor = vec4 (0., 0., 0., 1.);
    }
    else
	discard;
}


// Local Variables:
// mode: c++
// End:
