/**
 * Interface between flex and bison
 * @file   lexYacc.h
 * @author Dan R. Lipsa
 */
#ifndef __LEX_YACC_H__
#define __LEX_YACC_H__

#include <string>
#include <vector>
#include <map>
#include <Qt>
#include "Color.h"
#include "AttributeType.h"

using namespace std;

class ExpressionTree;
class NameSemanticValue;
class AttributeCreator;


/**
 * Defines the datatypes for semantic values for terminals and non-terminals
 * in the gramar
 */
union SemanticValue
{
    /**
     * Value for an iteger
     */
    int m_int;
    /**
     * Value for a floating point
     */
    float m_real;
    /**
     * Value for a list of integers
     */
    vector<int>* m_intList;
    /**
     * Value for a list of real numbers
     */
    vector<float>* m_realList;
    /**
     * An identifier
     */
    string* m_id;
    /**
     * An expression tree
     */
    ExpressionTree* m_node;
    /**
     * Knows how to create an attribute
     */
    AttributeCreator* m_attributeCreator;
    AttributeType m_attributeType;
    vector<NameSemanticValue*>* m_nameSemanticValueList;
    NameSemanticValue* m_nameSemanticValue;
    Color::Name m_color;
};
/**
 * Defines the datatype for semantic values in bison to be yystype
 */
#define YYSTYPE SemanticValue

/**
 * Checks if an identifier is a keyword.
 * @param s identifier to be checked.
 * @return the keyword ID or 0 if `s' is not a keyword
 */
int KeywordId (const char* s);

const char* KeywordString (int id);


/**
 * Turns on or off flex debugging
 * @param debugging turns on debugging with 1 and turns off debugging with 0
 */
void FlexDebugging (int debugging);

/**
 * Turns on or off bison debugginig
 * @param debugging turns on debugging for 1, off for 0
 */
void BisonDebugging (int debugging);

/**
 * Standard bison function. Called when there is a 
 * parse error. I also call it for an error in the lexical analyzer.
 * @param error error message
 */
void foamerror (const char* error);

/**
 * Parser generated by bison from the description file foam.y
 * @return 0 for success, different than 0 otherwise
 */
int foamparse(void);
/**
 * File descriptor used by the generated lexer to read data
 */
extern FILE *foamin;

#endif
// Local Variables:
// mode: c++
// End:
