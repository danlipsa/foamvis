/**
 * @file main.cpp
 * @author Dan R. Lipsa
 *
 * Parses an Evolver DMP file and displays the data from the file.
 */
#include "Application.h"
#include "Debug.h"
#include "Foam.h"
#include "FoamAlongTime.h"
#include "Force.h"
#include "ParsingData.h"
#include "MainWindow.h"
#include "DebugStream.h"

struct Option
{
    enum Enum
    {
	CONSTRAINT,
	CONSTRAINT_ROTATION,
	DEBUG_PARSING,
	DEBUG_SCANNING,
	DMP_FILES,
	FORCES,
	HELP,
	INI_FILE,
	LABEL,
	ORIGINAL_PRESSURE,
	OUTPUT_TEXT,
	PARAMETERS,
	SIMULATION,
	T1S,
	USE_ORIGINAL,
	VERSION
    };

    static const char* m_name[];
};

const char* Option::m_name[] = {
    "constraint",
    "constraint-rotation",
    "debug-parsing",
    "debug-scanning",
    "dmp-files",
    "forces",
    "help",
    "ini-file",
    "label",
    "original-pressure",
    "output-text",
    "parameters",
    "simulation",
    "t1s",
    "use-original",
    "version"
};


class ReadStringToken
{
public:
    ReadStringToken (boost::tokenizer<>& tok, const string& errorMessage) :
	m_tok (tok), m_errorMessage (errorMessage)
    {
    }

    void operator() (string* dest, boost::tokenizer<>::iterator* it)
    {
	if (++(*it) == m_tok.end ())
	    throw invalid_argument (m_errorMessage);
	*dest = *(*it);
    }
private:
    boost::tokenizer<>& m_tok;
    const string& m_errorMessage;
};

void validate(boost::any& v, const std::vector<std::string>& values,
              ConstraintRotationNames* ignore1, int ignore2)
{
    (void) ignore1;(void)ignore2;
    ConstraintRotationNames crn;
    boost::tokenizer<> tok (values[0]);
    istringstream istr;
    string errorMessage ("--constraint-rotation needs four parameters.");
    boost::tokenizer<>::iterator it = tok.begin ();
    if (it == tok.end ())
	throw invalid_argument (errorMessage);
    istr.str (*it);
    istr >> crn.m_constraintIndex;
    ReadStringToken readStringToken (tok, errorMessage);
    readStringToken (&crn.m_xName, &it);
    readStringToken (&crn.m_yName, &it);
    readStringToken (&crn.m_angleName, &it);
    v = boost::any(crn);
}


void validate(boost::any& v, const std::vector<std::string>& values,
              ForceNames* ignore1, int ignore2)
{
    (void)ignore1;(void)ignore2;
    ForceNames fn;
    boost::tokenizer<> tok (values[0]);
    istringstream istr;
    string errorMessage ("--forces needs 5 parameters.");
    boost::tokenizer<>::iterator it = tok.begin ();
    if (it == tok.end ())
	throw invalid_argument (errorMessage);
    istr.str (*it);
    istr >> fn.m_bodyId;
    --fn.m_bodyId;
    ReadStringToken readStringToken (tok, errorMessage);
    readStringToken (&fn.m_networkForceName[0], &it);
    readStringToken (&fn.m_networkForceName[1], &it);
    readStringToken (&fn.m_pressureForceName[0], &it);
    readStringToken (&fn.m_pressureForceName[1], &it);
    v = boost::any(fn);    
}

void printVersion ()
{
    /**
     * DO NOT CHANGE
     * the version number and date it is generated by release.pl
     */
    const char* version = "0.5.2096";
    const char* date = "2011-08-17 14:26:17";
    cout << "foam version " << version << ", date " << date;
#ifdef QT_NO_DEBUG
    cout << ", RELEASE";
#else
    cout << ", DEBUG";
#endif
    cout << endl;
}

po::options_description getCommonOptions (
    string* t1sFile,
    ConstraintRotationNames* constraintRotationNames,
    vector<ForceNames>* forcesNames)
{
    po::options_description commonOptions (
	"\"foam [COMMAND_LINE_OPTIONS] [COMMON_OPTIONS] <files> ...\"\n"
	"\"foam [COMMAND_LINE_OPTIONS]\" where --ini-file has to be specified\n"
	"<files> - one or more DMP files\n"
	"COMMON_OPTIONS");
    commonOptions.add_options()
	(Option::m_name[Option::CONSTRAINT],
	 po::value<size_t>(&constraintRotationNames->m_constraintIndex), 
	 "a constraint that specifies an object.\n"
         "arg=<constraint> where <constraint> is the constraint number.")
	(Option::m_name[Option::CONSTRAINT_ROTATION], 
	 po::value<ConstraintRotationNames>(constraintRotationNames), 
	 "a constraint that specifies an object which rotates.\n"
	 "arg=\"<constraint> <xName> <yName> <angleName>\" where " 
	 "<constraint> specifies the constraint number, <xName>, <yName> "
	 "specify names for parameters that store the center of rotation and "
	 "<angleName> specifies the name of the parameter that stores "
	 "the rotation angle.")
	(Option::m_name[Option::FORCES], 
	 po::value< vector<ForceNames> >(forcesNames),
	 "reads the forces acting on a body.\n"
	 "arg=\"<bodyId> <networkXName> <networkYName> "
	 "<pressureXName> <pressureYName>\" where <bodyId> is the ID of the "
	 "body the force acts on, (<networkXName>, <networkYName>) are the "
	 "names of the X and Y components of the network force and "
	 "(<pressureXName>, <pressureYName>) are the X and Y components of "
	 "the pressure force.")
	(Option::m_name[Option::ORIGINAL_PRESSURE],
	 "shows original pressure values")	    
	(Option::m_name[Option::T1S],
	 po::value<string>(t1sFile), 
	 "reads T1 positions.\n"
	 "arg=<file> where <file> specifies a text file with "
	 "T1 times and positions. Reading T1s won't work if you "
	 "skip time steps")
	(Option::m_name[Option::USE_ORIGINAL], "uses the ORIGINAL atribute "
	 "to figure out the body id.")
	;
    return commonOptions;
}

po::options_description getCommandLineOptions (
    string* iniFile, string* simulationLabel)
{
    po::options_description commandLineOptions (
	"COMMAND_LINE_OPTIONS");
    commandLineOptions.add_options()
	(Option::m_name[Option::DEBUG_PARSING], 
	 "produces output that help debugging the parser")
	(Option::m_name[Option::DEBUG_SCANNING], 
	 "produces output that helps debugging the scanner")
	(Option::m_name[Option::HELP], "produce help message")
	(Option::m_name[Option::INI_FILE], 
	 po::value<string>(iniFile), 
	 "choose simulation and read visualization parameters " 
	 "from the ini file.\n"
	 "arg=<iniFile>. See simulations.ini for an example.")
	(Option::m_name[Option::OUTPUT_TEXT],
	 "outputs a text representation of the data")
	(Option::m_name[Option::SIMULATION],
	 po::value<string>(simulationLabel),
	 "read visualization parameters from the ini file.\n"
	 "arg=<simulation> where <simulation> is a label "
	 "in the ini file specified with the ini-file option." )
	(Option::m_name[Option::VERSION], "prints version information")
	;
    return commandLineOptions;
}

po::options_description getIniOptions (
    vector<string>* labels, vector<string>* parameters)
{
    po::options_description iniOptions (
	"INI_OPTIONS: (see simulations.ini for an example)");
    iniOptions.add_options()
	(Option::m_name[Option::LABEL], 
	 po::value< vector<string> >(labels), 
	 "name a simulation.\n"
	 "arg=<simulationLabel> A JPG file <simulationLabel>.jpg is "
	 "read from the same folder as the ini file.")
	(Option::m_name[Option::PARAMETERS], 
	 po::value< vector<string> >(parameters), 
	 "foamvis parameters.\n"
	 "arg=<parameters> where <parameters> is a "
	 "string \"[COMMON_OPTIONS] <files> ...\"")
	;
    return iniOptions;
}


void parseOptions (int argc, char *argv[],
		   string* t1sFile,
		   vector<string>* fileNames,
		   ConstraintRotationNames* constraintRotationNames,
		   vector<ForceNames>* forcesNames,
		   po::variables_map* vm)
{
    string iniFile, simulationLabel;
    vector<string> labels, parameters;
    po::options_description commandLineOptions = getCommandLineOptions (
	&iniFile, &simulationLabel);
    po::options_description iniOptions = getIniOptions (
	&labels, &parameters);
    po::options_description commonOptions = getCommonOptions (
	t1sFile, constraintRotationNames, forcesNames);
    // Declare the supported options.
    po::options_description hiddenOptions("Hidden options");
    hiddenOptions.add_options()
	(Option::m_name[Option::DMP_FILES], 
	 po::value< vector<string> >(fileNames), "dmp file");
    po::options_description options;
    options.add(commonOptions).add (commandLineOptions).add(hiddenOptions);

    po::positional_options_description positionalOptions;
    positionalOptions.add(Option::m_name[Option::DMP_FILES], -1);

    po::store(po::command_line_parser (argc, argv).
	      options (options).positional (positionalOptions).run (), *vm);
    po::notify(*vm);
    if (constraintRotationNames->m_constraintIndex != INVALID_INDEX)
	--constraintRotationNames->m_constraintIndex;
    if (vm->count (Option::m_name[Option::HELP])) 
    {
	cout << commonOptions << "\n";
	cout << commandLineOptions << endl;
	cout << iniOptions << endl;
	exit (0);
    }
    if (vm->count (Option::m_name[Option::VERSION]))
    {
	printVersion ();
	exit (0);
    }
    if (argc == 1 || ! vm->count (Option::m_name[Option::DMP_FILES]))
    {
	printVersion ();
	cerr << "No DMP file specified" << endl;
	cerr << commonOptions << endl;
	cerr << commandLineOptions << endl;
	cerr << iniOptions << endl;
	exit (13);
    }
}


/**
 * Parses the data file, reads in vertices, edges, etc and displays them.
 * @return 0 for success, different than 0 otherwise
 */
int main(int argc, char *argv[])
{
    try
    {
	FoamAlongTime foamAlongTime;
	string t1sFile;
	vector<string> fileNames;
	ConstraintRotationNames constraintRotationNames;
	vector<ForceNames> forcesNames;
	po::variables_map vm;

	parseOptions (argc, argv, 
		      &t1sFile, &fileNames, &constraintRotationNames,
		      &forcesNames,
		      &vm);	
	foamAlongTime.ParseFiles (
	    fileNames,
	    vm.count (Option::m_name[Option::USE_ORIGINAL]),
	    constraintRotationNames,
	    forcesNames,
	    vm.count (Option::m_name[Option::DEBUG_PARSING]), 
	    vm.count (Option::m_name[Option::DEBUG_SCANNING]));
	size_t timeSteps = foamAlongTime.GetTimeSteps ();
	if (vm.count (Option::m_name[Option::T1S]))
	    foamAlongTime.ReadT1s (t1sFile, timeSteps);
        if (timeSteps != 0)
        {
	    foamAlongTime.SetAdjustPressure (
		! vm.count (Option::m_name[Option::ORIGINAL_PRESSURE]));
	    foamAlongTime.Preprocess ();
	    if (vm.count (Option::m_name[Option::OUTPUT_TEXT]))
		cdbg << foamAlongTime;
	    else
	    {
		int result;
		QCoreApplication::setOrganizationName ("Swansea University");
		QCoreApplication::setOrganizationDomain ("www.swansea.ac.uk");
		QCoreApplication::setApplicationName ("FoamVis");
		boost::shared_ptr<Application> app = Application::Get (
		    argc, argv);
		MainWindow window (foamAlongTime);
		window.show();
		result = app->exec();
		app->release ();
		return result;
	    }
            return 0;
        }
	else
	{
	    cdbg << "Error: The patern provided does not match any file" 
		 << endl;
	}
    }
    catch (const exception& e)
    {
	cdbg << "Exception: " << e.what () << endl;
    }
}
